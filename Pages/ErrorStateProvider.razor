@if (Display)
{
    <div class="alert-danger p-2 mb-2 d-flex justify-content-between rounded">
        <span>@GetErrorMessage()</span><span class="hand" @onclick="ClearError"><i class="fas fa-times mr-2"></i></span>
    </div>
}

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private ErrorTypes Error { get; set; }
    private bool Display => Error is not ErrorTypes.NotSpecified;

    // call StateHasChanged when updating error
    // in case called from component within childcontent.

    public void ShowError(ErrorTypes error)
    {
        Error = error;
        StateHasChanged();
    }

    public void ClearError()
    {
        Error = ErrorTypes.NotSpecified;
        StateHasChanged();
    }

    private string GetErrorMessage()
    {
        switch (Error)
        {
            case ErrorTypes.ExistingKey:
                {
                    return "Error: Entry with that key already exists.";
                }
            case ErrorTypes.EmptyKey:
                {
                    return "Error: Key cannot be empty.";
                }
            case ErrorTypes.EmptyValue:
                {
                    return "Error: Value cannot be empty.";
                }
            case ErrorTypes.WhiteSpaceInKey:
                {
                    return "Error: Key cannot contain whitespace.";
                }
            default:
                return "Error";
        }
    }
}

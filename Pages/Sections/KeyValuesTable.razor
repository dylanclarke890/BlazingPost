<h4>@Title</h4>

<table class="table mt-3">
    <tr>
        <th>Key</th>
        <th>Value</th>
        <th>Action</th>
    </tr>
    @foreach (var keyValue in KeyValuePairs)
    {
        <tr @key="keyValue.Key">
            <td>@keyValue.Key</td>
            <td>@keyValue.Value</td>
            <th>
                <button class="btn btn-primary" @onclick="() => DeleteValue(keyValue.Key)">Delete</button>
                <button class="btn btn-primary" @onclick="() => EditValue(keyValue.Key)">Edit</button>
            </th>
        </tr>
    }
    <tr>
        <td><input class="form-control" id="new-key" type="text" autocomplete="off" @bind="NewKey" /></td>
        <td><input class="form-control" id="new-val" type="text" autocomplete="off" @bind="NewValue" /></td>
        <td>
            @if (Editing)
            {
                <button class="btn btn-primary" @onclick="UpdateValue">Update</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="AddValue">Add New</button>
            }
        </td>
    </tr>
</table>

@code {
    [CascadingParameter]
    private ErrorStateProvider ErrorState { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public Dictionary<string, string> KeyValuePairs { get; set; }

    [Parameter]
    public bool WhiteSpaceAllowedInKey { get; set; }

    [Parameter]
    public List<string> MonitorKeys { get; set; }

    [Parameter]
    public EventCallback OnAction { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<string, string>> OnMonitoredKeyActioned { get; set; }

    private string NewKey { get; set; }
    private string NewValue { get; set; }
    private string OldKey;
    private string OldValue;

    private bool Editing = false;

    /// <returns>True if key/value pair was successfully added.</returns>
    private async Task<bool> AddValue()
    {
        if (!Validation(NewKey, NewValue))
        {
            return false;
        }

        var success = KeyValuePairs.TryAdd(NewKey, NewValue);
        if (success)
        {
            await NotifyParent(NewKey, NewValue);
            ClearInputs();
            ErrorState.ClearError();
            return true;
        }
        else
        {
            ErrorState.ShowError(ErrorTypes.ExistingKey);
        }
        return false;
    }

    private async Task DeleteValue(string key)
    {
        KeyValuePairs.TryRemove(key);
        await NotifyParent(key, null);
    }

    private void EditValue(string key)
    {
        NewKey = key;
        NewValue = KeyValuePairs[key];

        // save current vals for updating later
        OldKey = NewKey;
        OldValue = NewValue;

        Editing = true;
    }

    private async Task UpdateValue()
    {
        // Calling this twice now (again in add) but needs to run before we delete the old key.
        if (!Validation(NewKey, NewValue))
        {
            return;
        }

        // Get rid of the old key/value first - easier than checking if it's changed.
        await DeleteValue(OldKey);

        // Then add new one as normal.
        var result = await AddValue();
        Editing = !result;
    }

    private bool Validation(string key, string value)
    {
        if (string.IsNullOrEmpty(key))
        {
            ErrorState.ShowError(ErrorTypes.EmptyKey);
            return false;
        }

        if (string.IsNullOrEmpty(value))
        {
            ErrorState.ShowError(ErrorTypes.EmptyValue);
            return false;
        }

        if (!WhiteSpaceAllowedInKey && key.Contains(" "))
        {
            ErrorState.ShowError(ErrorTypes.WhiteSpaceInKey);
            return false;
        }

        return true;
    }

    private async Task NotifyParent(string key, string value)
    {
        await OnAction.InvokeAsync();
        if (MonitorKeys.Any(k => k == key))
        {
            await OnMonitoredKeyActioned.InvokeAsync(new(key, value));
        }
    }

    private void ClearInputs()
    {
        NewKey = string.Empty;
        NewValue = string.Empty;
        OldKey = null;
        OldValue = null;
    }
}
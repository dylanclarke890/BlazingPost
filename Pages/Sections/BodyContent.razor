<h3>Body</h3>

<EditForm Model="model">
    <InputRadioGroup @bind-Value="model.BodyType">
        @foreach (var option in Enum.GetValues<BodyType>())
        {
            <InputRadio Value="option" @onclick="async () => await BodyTypeSelected(option)"/> @option <br />
        }
    </InputRadioGroup>

    @if (model.BodyType == BodyType.String)
    {
        <div class="form-group">
            <label>String Content:</label>
            <InputTextArea class="form-control" @bind-Value="model.StringContent" @onblur="NotifyParentOfChange"/>
        </div>
    }
    else if (model.BodyType == BodyType.File)
    {
        <div class="form-group">
            <label>File Content:</label>
            <InputFile class="form-control-file" OnChange="HandleFiles" multiple />
        </div>
    }
</EditForm>

@code {
    [Parameter]
    public EventCallback<Body> OnBodyUpdated { get; set; }

    private Body model = new();

    private async Task BodyTypeSelected(BodyType bodyType)
    {
        if (bodyType == BodyType.None)
        {
            ClearBodyContent();
        }

        model.BodyType = bodyType;
        await NotifyParentOfChange();
    }

    private void HandleFiles(InputFileChangeEventArgs e)
    {
        model.FileContent = new();
        model.FileContent.AddRange(e.GetMultipleFiles());
    }

    private void ClearBodyContent()
    {
        model.StringContent = null;
        model.FileContent = null;
    }

    private async Task NotifyParentOfChange()
    {
        await OnBodyUpdated.InvokeAsync(model);
    }
}
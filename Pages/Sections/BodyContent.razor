<h3>Body</h3>

<EditForm Model="Body">
    <InputRadioGroup @bind-Value="Body.BodyType">
        @foreach (var option in Enum.GetValues<BodyType>())
        {
            <InputRadio Value="option" @onclick="async () => await BodyTypeSelected(option)"/> @option <br />
        }
    </InputRadioGroup>

    @if (Body.BodyType is BodyType.String)
    {
        <div class="form-group">
            <label>String Content:</label>
            <InputTextArea class="form-control" @bind-Value="Body.StringContent" @onblur="NotifyParentOfChange"/>
        </div>
    }
    else if (Body.BodyType is BodyType.File)
    {
        <div class="form-group">
            <label>File Content:</label>
            <InputFile class="form-control-file" OnChange="HandleFiles" multiple />
        </div>
    }
</EditForm>

@code {
    [Parameter]
    public Body Body { get; set; }

    [Parameter]
    public EventCallback<Body> OnBodyUpdated { get; set; }

    protected override void OnParametersSet()
    {
        Body ??= new();
        base.OnParametersSet();
    }

    private async Task BodyTypeSelected(BodyType bodyType)
    {
        if (bodyType is BodyType.None)
        {
            ClearBodyContent();
        }

        Body.BodyType = bodyType;
        await NotifyParentOfChange();
    }

    private void HandleFiles(InputFileChangeEventArgs e)
    {
        Body.FileContent = new();
        Body.FileContent.AddRange(e.GetMultipleFiles());
    }

    private void ClearBodyContent()
    {
        Body.StringContent = null;
        Body.FileContent = null;
    }

    private async Task NotifyParentOfChange()
    {
        await OnBodyUpdated.InvokeAsync(Body);
    }
}
@page "/post"
<!--
TODO:
    1. Add validation for empty values as no point in adding them. DONE!
    2. Change ExistingKey to generic error checker. DONE!
    3. Add error enums. DONE! 
    4. Continue with BlazingPostMan.
    5. Update error UI (low priority).
-->

<h3>Post</h3>

<div class="form-group">
    <label for="url-input">Enter a URL: </label>
    <input class="form-control" id="url-input" type="text" @bind="Url" />
</div>

<h4>Add Params</h4>
@if (Error)
{
    switch (ErrorType)
    {
        case ErrorTypes.ExistingParamKey:
            {
                <p class="text-danger">Error: Param with that key exists. Would you like to <span class="text-primary hand" @onclick="ConfirmParamUpdate">update</span> it?<span class="text-dark hand" @onclick="ClearError"> X</span></p>
                break;
            }
        case ErrorTypes.EmptyParamValue:
            {
                <p class="text-danger">Error: Param value cannot be empty. <span class="text-dark hand" @onclick="ClearError"> X</span></p>
                break;
            }
        default:
            break;
    }

}

<table class="table mt-3">
    <tr>
        <th>Key</th>
        <th>Value</th>
        <th>Action</th>
    </tr>
    @foreach (var keyValue in Params)
    {
        <tr>
            <td>@keyValue.Key</td>
            <td>@keyValue.Value</td>
            <th>
                <button class="btn btn-primary" @onclick="() => DeleteParam(keyValue.Key)">Delete</button>
                <button class="btn btn-primary" @onclick="() => EditParam(keyValue.Key)">Edit</button>
            </th>
        </tr>
    }
    <tr>
        <td><input class="form-control" id="new-key" type="text" @bind="NewKey" /></td>
        <td><input class="form-control" id="new-val" type="text" @bind="NewValue" /></td>
        <td>
            @if (Editing)
            {
                <button class="btn btn-primary" @onclick="UpdateParam">Update</button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="AddParam">Add New</button>
            }
        </td>
    </tr>
</table>

<div class="mt-3">
    <h4>Preview: </h4>
    <p>@GetUrlPreview()</p>
</div>

@code {
    private string Url { get; set; } = "https://localhost:44384/post";

    private Dictionary<string, string> Params = new() { ["test key"] = "this is a test val" };

    private string NewKey { get; set; }
    private string NewValue { get; set; }

    private bool Error = false;
    private ErrorTypes ErrorType;

    private bool Editing = false;

    private void AddParam()
    {
        if (string.IsNullOrEmpty(NewValue))
        {
            ShowError(ErrorTypes.EmptyParamValue);
            return;
        }

        var success = Params.TryAdd(NewKey, NewValue);

        if (success)
        {
            ClearParamInputs();
        }
        else
        {
            ShowError(ErrorTypes.ExistingParamKey);
        }
    }

    private void DeleteParam(string key)
    {
        Params.Remove(key);
    }

    private void EditParam(string key)
    {
        NewKey = key;
        NewValue = Params[key];
        Editing = true;
    }

    private void UpdateParam()
    {
        Params[NewKey] = NewValue;
        Editing = false;
    }

    private void ConfirmParamUpdate()
    {
        UpdateParam();
        ClearError();
        ClearParamInputs();
    }

    private void ShowError(ErrorTypes errorType)
    {
        Error = true;
        ErrorType = errorType;
    }

    private void ClearError()
    {
        Error = false;
        ErrorType = ErrorTypes.NotSpecified;
    }

    private void ClearParamInputs()
    {
        NewKey = string.Empty;
        NewValue = string.Empty;
    }

    private string GetUrlPreview()
    {
        // TODO: Refactor (string builder).

        string url = "";
        url += Url;
        if (Params.Any())
        {
            url += "?";
            foreach (var keyValue in Params)
            {
                url += $"{keyValue.Key}={keyValue.Value}&";
            }

            // Remove extra '&'
            url = url.Substring(0, url.Length - 1);
        }
        return url;
    }
}

<style>
    .hand {
        cursor: pointer;
    }
</style>
@page "/post"
@using BlazingPostMan.Shared.Tab;
@inject IRequestProcessor requestProcessor
<!--
TODO:
    1. Ability to add content to PUT or POST requests (body of request).
    2. Update error UI (low priority).
-->

<h3>BlazingPostMan</h3>

<div class="form-group row">
    <label class="col-2 col-form-label" for="url-input">Enter a URL: </label>
    <input class="col-10 form-control" id="url-input" type="text" @bind="Url" />
</div>

<label>Request Type: </label>
<select @bind="requestType">
    <option value="@RequestType.POST">@RequestType.POST</option>
    <option value="@RequestType.GET">@RequestType.GET</option>
    <option value="@RequestType.PUT">@RequestType.PUT</option>
    <option value="@RequestType.DELETE">@RequestType.DELETE</option>
</select>

<div class="mt-3">
    <h4>Preview: </h4>
    <p>@requestType @UrlHelper.GetUrl(Url, Params)</p>
</div>

<button class="btn btn-primary" @onclick="SendRequest" disabled="@Sending">Send</button>

<h3>Result:</h3>
<div>
    @requestResult
</div>

<TabSet>
    <TabChild Title="Params">
        <UrlParameters Params="Params" OnParamAction="() => { StateHasChanged(); }" />
    </TabChild>
    <TabChild Title="Body">
        <p>Body</p>
    </TabChild>
</TabSet>

@code {
    private string Url { get; set; } = "https://localhost:44384/api/testendpoint";

    private bool Sending = false;

    private string requestResult;
    private RequestType requestType { get; set; }

    private Dictionary<string, string> Params = new() { ["test key"] = "this is a test val" };

    private async Task SendRequest()
    {
        Sending = true;
        var result = await requestProcessor.ProcessRequest(UrlHelper.GetUrl(Url, Params), requestType);
        requestResult = await result.Content.ReadAsStringAsync();
        Sending = false;
    }
}

<style>
    .hand {
        cursor: pointer;
    }
</style>